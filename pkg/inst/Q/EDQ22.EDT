SURVO84ED 81 150    81 S20                                                       *SAVE EDQ22                                                                      *LOAD EDQ                                                                        *                                                                                *TABLE?                                                                          @TAB <data>,L                                                                    *makes cross-tabulations of <data> according to selected variables and           *saves the results in the output file (see OUTPUT) and from line L               *onwards in the current edit field, if L is given.                               *Also means and standard deviations of a cell variable can be computed           *(see CELL specification below).                                                 *The IND and CASES specifications may be used to restrict the set of             *observations.                                                                   *                                                                                *Tables produced by TAB have a header and letters as line labels.                *The header and the labels are omitted by giving a specification LABELS=0 .      *@C                                                                              *The variables controlling classification can be numeric or string               *variables and they are to be listed by the specification                        *VARIABLES=<column var>,<row var 1>,<row var 2>,...,<row var n>                  *or                                                                              *VARIABLES=<column var>:<row var 1>,<row var 2>,...,<row var n>                  *                                                                                *The first alternative of the VARIABLES specification implies computing          Sof one n-dimensional table.                                                     *The second one (with a colon ':' after <column var>) implies computing          Sof n two-dimensional tables with a common <column var>.                         *There is still a more general alternative                                       *VARIABLES=<cvar 1>:<cvar 2>:...:<cvar m>:<rvar 1>,<rvar 2>,...                  *which allows m nested column variables for each row variable.                   *@C                                                                              *The classification of a numeric variable has to be given in the form            *<name of var>=L1,U1,U2,U3,...                                                   *where L1=lower limit of the 1st class                                           *      U1=upper limit of the 1st class                                           *      U2=upper limit of the 2nd class etc.                                      *For example, Age=0,6,12,21 specifies age groups 0-6,7-12 and 13-21.             *Any class can be given a name in parentheses after the upper limit.             *For example, Color=1,1(white),2(red),3(blue).                                   *                                                                                *If the class widths are equal, classification may also be given in the          *form <name of var>=<up.limit_of_1.st_class>(<class_width>)<last_class>          *For example, Age=10(5)25 is same as Age=5,10,15,20,25. In this                  *abbreviated notation no class names can be given.                               *                                                                                *By default, cases with missing values in classifiers are omitted.               *However, for numeric classifiers a special class MISSING can be                 *given as the last class. Example; Age=5,10,15,20,25,MISSING                     *@C                                                                              *The classification of a string variable is described by examples:               *                                                                                *1) Assume that 'Weekday' is a string variable with values 'Su','Mo' etc.        *   A classification for 'Weekday' could be                                      *   Weekday=/Mo/Tu/We/Th/Fr(Workdays),/Sa/Su(Weekend)                            *   thus forming 2 classes Workdays=(Mo,Tu,We,Th,Fr) and Weekend=(Sa,Su).        *                                                                                *2) Assume that 'Letter' is a string variable with values 'A','B','C' etc.       *   To classify letters to wowels and consonants the following                   *   specification is valid:                                                      *   Letter=/A/E/I/O/U(wowel),/-(consonant)                                       *   where /- denotes all the remaining alternatives.                             *@C                                                                              *The printout of the (frequency) table may be include column and row             *sums, too. In addition to frequencies various tables of percentages             *can obtained. These options are selected by a RESULTS specification             *of the form                                                                     *RESULTS=CSUMS,RSUMS,C%,R%,T%                                                    *with following consequences:                                                    *CSUMS   sums of columns                                                         *RSUMS   sums of rows                                                            *C%      table of percentages in columns                                         *R%      table of percentages in rows                                            *T%      table of percentages from the grand total                               *Any of the key words in RESULTS may be omitted.                                 *@C                                                                              *An example of a complete TAB operation for a 3-dimensional contingency          *table with column and row sums:                                                 *TAB COMMUNES,27                                                                 *VARIABLES=Industry,Province,People  RESULTS=CSUMS,RSUMS                         *Industry=0,2,5,9   (proportion of people working in industry 0-9)               *Province=/UUS/KYM,/TUR/AHV,/-  (3 classes)                                      *People=0,5000(small),20000(medium),500000(large)                                *@C                                                                              *                                                                                *Tables of means, standard deviations and sums:                                  *To compute means and standard deviations for a selected variable,               *a CELL specification may be included. It has the form                           *CELL=<cell variable>,<format for the results, ###.# for example>                *                                                                                *Sums of the cell variable are computed (instead of means and standard           *deviations) by giving the CELL specification in the form                        *CELL=<cell variable>,<format>,<FSUM or SUM>                                     *For FSUM, both frequencies and sums are printed. For SUM, sums only are         *printed.                                                                        *                                                                                *  T = More information on TAB operations                                        *  S = General information on statistical operations                             %T=TAB S=STATIS?                                                                 *@SELECT                                                                         *                                                                                *TAB?                                                                            *TAB operations for multiway tables:                                             *                                                                                *  1 = Computing frequency tables and tables of means, std.devs and sums (TAB)   *  2 = Analysis of variance (TABFIT)                                             *  3 = Management and editing of multiway tables                                 *  4 = Fitting log-linear models (TABFIT)                                        *  5 = Testing 2-way frequency tables by simulation (TABTEST)                    *  M = MTAB operation (by M.Korhonen)                                            *  T = TAB key                                                                   *  P = Producing several tables at the same time (/TABULATE by KV)               *  B = Creating Burt's contingency tables (BURT by KV)                           *                                                                                *  S = More information on statistical operationshadows                                                                               44444444444444444                                                               4 444444444444444                                                          END                                                                              