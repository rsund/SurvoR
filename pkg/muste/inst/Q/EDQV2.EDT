SURVO 98 edit field:    81       300       20 (32 bit version)
001|*SAVE EDQV2
002|*LOAD EDQ
004|*LAG?
005|*  1 = lags and leads in transformations of variables
006|*  2 = LAG specification in PLOT operation
007|%1=LAG1 2=LAG2?
008|*@SELECT
010|*LAG1?
011|*Variables with lags and leads are available in all types of the VAR oper-
012|*ation using the following notation:
013|*         # of observation    value of variable SERIES
014|*             current - 2      SERIES[-2]
015|*             current - 1      SERIES[-1]
016|*             current          SERIES         (=SERIES[0])
017|*             current + 1      SERIES[+1]
018|*             current + 2      SERIES[+2]
019|*Examples:
020|*VAR MEAN3,DIFF TO TEST2
021|*MEAN3=(SER1[-1]+SER1+SER1[+1])/3
022|*DIFF=SER1-SER1[-1]
023|*END
025|*VAR Fibo,Ratio TO GOLDEN
026|*Fibo=if(ORDER<3)then(1)else(Fibo[-1]+Fibo[-2])
027|*Ratio=if(ORDER<2)then(MISSING)else(Fibo/Fibo[-1])
028|*END
030|*  V = More information on VAR operation
031|%V=VAR?
032|*@SELECT
034|*STRING?
035|*  1 = String variables in data files
036|*  2 = Transformation of string variables
037|%1=FCREATE? 2=VARSTR
038|*@SELECT
040|*VARSTR?
041|*If a string variable holds numerical information, it can be treated
042|*like numerical variables in numerical transformations (by the VAR operation.)
044|*To modify true textual information in string variables, a VAR operation
045|*of the form
046|*VAR str(U,p,len)=str(V1,p1,len1)&str(V2,p2,len2)&... TO <data>
047|*where U,V1,V2,... are string variables, is available.
048|*Above, str(U,p,len) means a partial string of U starting from position 'p'
049|*and having length of 'len' bytes. Alternative notations are
050|*str(U) (the whole string field), str(U,p) (the whole field from 'p' onwards).
051|*'&' means concatenation (chaining) of the strings.
052|*On the right hand side also constant strings of the form "ABC" can appear.
053|*(Examples are given on the next page.)
055|*pos(S,p,string) is a useful auxiliary function giving the position of 'string'
056|*in the string variable S after the 'p'th position.
057|*pos(S,string) is the same as pos(S,1,string) .
058|*For example, if S is "ABC:123:X", then pos(S,:)=4, pos(S,5,:)=8, pos(S,Z)=0 .
059|*@C
060|*Conditional VAR statements of the form
061|*VAR Var1=if(str(...)=str(...))then(value1)else(value2) TO DATA1
062|*are allowed. Also <,>,<> etc. are possible as relational symbols.
063|*Also string fields with lags and leads are permitted.                          C
064|*For example,                                                                   C
065|*VAR S=if(str(X[-1],1,2)=str(X,1,2))then(1)else(0) TO DATA1                     C
066|*gives S=1 when the 2 first characters of X are same in the previous            C
067|*record and S=0 otherwise.                                                      C
069|*Trailing blanks in string concatenation:                                       C
070|*In string expression of the form str(A)&str(B)&str(C) trailing blanks          C
071|*are included.                                                                  C
072|*To remove such blanks, `connector' `|' is used in place of `&'.                C
073|*Thus if str(A)="AA  ", str(B)="BBB   ", str(C)="anything",                     C
074|*str(A)&str(B)&str(C)="AA  BBB   anything" but                                  C
075|*str(A)|str(B)|sp&str(C)="AABBB anything" (sp denotes one blank).               C
076|*@C
077| Examples: (See, what are the effects of the VAR operations below.)
079|*DATA TEST,A,B,N,M
080|M AAAAAA  AAAAAAAA  AAAA  AAAAAAAA    A   A    AA
081|N Code1   Code2    Year1  Code3     len   D  LagY
082|A 281037  AB/1967   1937  1967:AB     7   0
083|* 170667  A/1978    1967  1978:A      6   0    37
084|* 120659  ACD/1977  1959  1977:ACD    8   0    67
085|B 190939  D/1989    1939  1989:D      6   1    59
086|*                                              39
087|*VAR str(Year1)="19"&str(Code1,5) TO TEST
088|*VAR str(Code3)=str(Code2,pos1+1,4)&":"&str(Code2,1,pos1-1) TO TEST
089|*                 pos1=pos(Code2,/)
090|*VAR len=pos(Code2,sp)-1 TO TEST
091|*                  sp (or space) is the notation for the 'space' character.
092|*                  comma is the notation for ',' .
093|*VAR D=if(str(Code2,1,1)="D")then(1)else(0) TO TEST / conditional statement
094|*VAR str(LagY[+1])=str(Year1,3,2) TO TEST / lags and leads allowed
095| ..........................
097|*@C
098|*VAR str(var2)=split(var1,<len>,<char>)                                         C
099|*splits a string in var1 so that spaces between 'words' are replaced
100|*by <char> so that the length of each substring is at most <len>
101|*except for 'words' longer that <len> bytes.
102|*Example: VARSTR(str2)=split(var1,8,|) converts
103|*var1="This is a long string" into form
104|*var2="This is|a long|string|".
106|*  V = More information on VAR operation
107|%V=VAR?
109|*VARSTAT?
110|@VARSTAT <data>,Y,<rule>
111|*computes a derived variable Y from active variables (say X1,X2,...,Xm)
112|*for active observations in <data> according to a given <rule>.
114|*Rules available are:
115|*VARSTAT <data>,Y,SUM             Y=X1+X2+...
116|*VARSTAT <data>,Y,SUM,p           Y=X1^p+X2^p+...
117|*VARSTAT <data>,Y,MEAN            Y=(X1+X2+...)/m
118|*VARSTAT <data>,Y,MEAN,p          Y=((X1^p+X2^p+...)/m)^(1/p)
119|*VARSTAT <data>,Y,MEDIAN          Y=median(X1,X2,...)
120|*VARSTAT <data>,Y,STDDEV          Y=stddev(X1,X2,...)
121|*VARSTAT <data>,Y,MAX             Y=max(X1,X2,...)
122|*VARSTAT <data>,Y,MIN             Y=min(X1,X2,...)
123|*VARSTAT <data>,Y,RANGE           Y=max-min
124|*VARSTAT <data>,Y,#MISS           Y= # of missing values
125|*VARSTAT <data>,Y,#N              Y= # of non-missing values
126|*VARSTAT <data>,Y,#VAL,A          Y= # of values X=A  (A is a constant)
127|*VARSTAT <data>,Y,#VAL,A,B        Y= # of values A<=X<=B (A and B constants)
129|*Other forms of VARSTAT are described on next pages.
130|*@C
131|*To compute several Y variables (say Y1,Y2,...) with different rules for
132|*the same X1,X2,..., another form of VARSTAT with a VARSTAT specification
133|*is
134|@VARSTAT <data> / VARSTAT=Y1,Y2,...
135|*                 Y1=<rule1> Y2=<rule2>, ...
136|*For example, the mean and the standard deviation in each active observation
137|*are computed as variables M1 and S1 by
138|*VARSTAT <data> / VARSTAT=M1,S1  M1=MEAN S1=STDDEV
139|*@C
140|*VARSTAT <data>,*,<rule>
141|*makes a collective transformation for all active variables. The original
142|*values are overwritten in this form of VARSTAT.
144|*Alternative rules:
145|*VARSTAT <data>,*,DIVSUM,100      Xi=100*Xi/SUM    i=1,2,...,m
146|*VARSTAT <data>,*,DIVMAX,100      Xi=100*Xi/MAX
147|*VARSTAT <data>,*,NORM,p,C        Normalize: X1^p+X2^p+..=C
148|*VARSTAT <data>,*,CENTER          Xi=Xi-mean
149|*VARSTAT <data>,*,STANDARD        Xi=(Xi-mean)/stddev
150|*VARSTAT <data>,*,DIV,<var>       Xi=Xi/<var>
151|*VARSTAT <data>,*,MLT,<var>       Xi=Xi*<var>
152|*VARSTAT <data>,*,ADD,<var>       Xi=Xi+<var>
153|*VARSTAT <data>,*,SUB,<var>       Xi=Xi-<var>
154|*VARSTAT <data>,*,SORT            Sort in ascending order                       C
155|*@C
156| Example:
157|*VARSTAT TEST,*,DIVSUM    / Activate these two VARSTAT lines!
158|*VARSTAT TEST,Sum,SUM
159|*VARS=X1,X2,X3
160|*DATA TEST,A,B,N,M
161|N  X1     X2     X3        Sum
162|M  AA.AA  AA.AA  AA.AA   111.111
163|A   6      -      1
164|*   6      3      5
165|*   -      1      7
166|*   8      1      0
167|B   6      2      2
169| 
170|* A = Some special forms of VARSTAT                                             C
171|* V = More information on transformations
173|%A=VARSTAT2 V=VAR?
174|*@SELECT
176|*VARSTAT2?
177|*Special forms of VARSTAT                                                       C
179|*VARSTAT <data>,Y,FIRST,L / L=val1,val2,...
180|*finds the first occurrence of values listed by L in each record
181|*and saves the position (# of variable) wherefrom the sought sequence
182|*starts as variable Y. For example, if L=0,1,0,1 and we have a
183|*record 1 1 0 1 1 0 1 0 1 1 0 0 1 0 1 1 1 ..., Y will be 6.
185|*VARSTAT <data>,Y,LAST,L / L=val1,val2,...
186|*respectively finds the last occurrence of a list of values. In the
187|*example above Y would be 12.
189|*Both in FIRST and LAST missing values in the list are notated by `-'s.
190|*If the sequence of values given by L is not found at all in a certain
191|*record, the code of a missing value is saved in Y.
192|*@C
193|*Special forms of VARSTAT (continuation)                                        C
195|*VARSTAT <data>,Y,#SEQ,L / L=val1,val2,...
196|*finds the number of sequences of values listed by L in each record.
197|*For example, if L=1,0,1 and we have a record
198|*1 1 0 1 1 0 1 0 1 1 0 0 1 0 1 0 1 , Y will be 3.
199|*  ^     ^               ^           <- starting positions of 1,0,1
200|*If specification OVERLAP=1 is given, also overlapping sequences are counted.
201|*In this case in the example
202|*1 1 0 1 1 0 1 0 1 1 0 0 1 0 1 0 1   Y will be 5.
203|*  ^     ^   ^           ^   ^
205|*VARSTAT <data>,Y,#RUN,L / L=val1,val2,...
206|*finds the number of runs of values listed by L in each record.
207|*For example, if L=1,2 and we have a record
208|*1 1 1 0 2 1 2 0 0 2 2 0 1 , Y will be 4
209|*^       ^         ^     ^   <- starting positions of the runs
211|*@C
212|*Special forms of VARSTAT (continuation)                                        C
214|*VARSTAT <data>,Y,CYCLEN
215|*computes the length of the shortest cycle of values which generates
216|*the current record of active variables.
218| Example:
219|*DATA C12,a,a+4,n,m
220|m 1 1 1 1 1 1 1 1 1 1 1 1 11
221|n A B C D E F G H I J K L  X
222|a 1 2 5 1 2 5 1 2 5 1 2 5  3
223|* 4 7 4 7 4 7 4 7 4 7 4 7  2
224|* 9 9 9 9 9 9 9 9 9 9 9 9  1
225|* 1 2 3 4 1 2 1 2 3 4 1 2  6
226|* 1 2 1 2 1 2 1 2 1 2 1 1 12
228|*MASK=AAAAAAAAAAAA
229|*VARSTAT C12,X,CYCLEN / gives cycle lengths of A,B,...,K,L  as X
230| 
231|*@C
232|*Special forms of VARSTAT (continuation)                                        C
234|*VARSTAT <data>,Y,#MODEVAL
235|*computes # of values (frequency) of the most common value in
236|*the current record.
238|*For example, in the case
239|*1 3 2 3 2 2 1 1 3 3 3 3
240|*#MODEVAL gives 6 since the mode (3) has 6 occurrences.
242|*V = More information on VARSTAT
243|%V=VARSTAT
