SURVO 98 edit field:    81       300       20 (32 bit version)
001|*SAVE EDQV3
002|*LOAD EDQ
004|*CHANCE?
005|*Various random variates may be generated by the VAR operation by means
006|*of the statistical library functions of editorial computing. (See ARIT?)
007|*To generate a random value from a distribution with the inverse distri-
008|*bution function G(), use G(rnd(0)) in the VAR operation.
009|*For example, standard normal random variates are obtained by
010|*N.G(0,1,rnd(0)) or faster by probit(rnd(0)). Other alternatives are:
011|*BIN.G(n,p,rnd(0))      binomial distribution Bin(n,p)
012|*Poisson.G(a,x)         Poisson distribution Poisson(a)
013|*t.G(n,rnd(0))          t distribution with n degrees of freedom
014|*CHI2.G(n,rnd(0))       Chi-square distribution with n degrees of freedom
015|*F.G(m,n,rnd(0))        F distribution with m,n degrees of freedom
017|*For serious applications the alternative random number generator rand()
018|*is recommended instead of rnd().
020|*  R = Alternative random number generators
021|*  V = More information on VAR operation
022|*  M = MNSIMUL for fast generation of multivariate normal samples
023|*  T = TRANSFORM <data> BY #UNIFORM(a,b)
024|*  X = RNDTEST for testing sequences of random numbers
026|%R=RAND V=VAR? M=MNSIMUL? T=TRANSFORM? X=RNDTEST
027|*@SELECT
029|*RAND?
030|*The rnd() function is a adopted as such as the Microsoft C Library
031|*function rand. It is based on a mixed congruential algorithm
032|*     U(n)=214013U(n-1)+2531011 mod 2^31 .
033|*According to certain empirical tests with an optional RNDTEST operation
034|*of Survo, these numbers are rather good but not as good as those
035|*generated by the rand() function described below.
037|*rand(n) where 1<=n<=2^32-1=4294967295 generates random numbers
038|*according to a Combined Tausworthe generator presented by Shu Tetsuoka
039|*and Pierre L'Ecuyer (ACM Transactions on Modelling and Computer Simulation,
040|*Vol.1, No.2, 1991). The first one of the proposed three generators is
041|*implemented as rand().
042|*The period length of rand() is about 10^18. In more serious simulation
043|*experiments where several long non-overlapping series of random numbers
044|*are to be guaranteed, special INSEED and OUTSEED specifications are
045|*available in VAR. The OUTSEED=<seed_number_file> specification
046|*saves the last two seed numbers used by rand(). To continue from this
047|*point onwards in a new experiment, enter these seed numbers by a
048|*corresponding INSEED=<seed_number_file> specification.
049|*When INSEED is given, the parameter n in rand(n) has no importance.
051|*@C
052|*Another alternative is the urand() function which corresponds to the
053|*classical prime modulus multiplicative linear congruential generator
054|*     U(n)=16807*U(n-1) mod 2^31-1
055|*suggested by Lewis, Goodman and Miller in 1969 and praised by Park
056|*and Miller as a minimal standard generator (see their paper "Random
057|*number generators: good ones are hard to find" in Communications of
058|*ACM, October 1988).
059|*The period length is only 2^31-1=2147483647 (2*10^9).
061|*A new alternative is the mrand() function using the Mersenne Twister           C
062|*algorithm by Takuji Nishimura and Makoto Matsumoto (1998, modified             C
063|*2002). It has a huge period 2^19937-1 (a Mersenne prime),                      C
064|*i.e. about 10^6000.                                                            C
065|*Currently mrand() is available in operations VAR, TRANSFORM BY #UNIFORM,       C
066|*MAT #TRANSFORM, MNSIMUL.                                                       C
068|*  V = More information on VAR operation
069|%V=VAR?
070|*@SELECT
072|*VARR?
073|@VAR <y_variable>=#<function>(<expression>) TO <data>
074|*makes various special transformations of <expression> to <y_variable>.
075|*In most cases <expression> is simply a variable.
076|*The following #<functions> are available:
077|*      #RANK   (ranks of values, tied observations with average rank)
078|*      #NRANK  (ranks of values, tied observations with lowest rank)
079|*      #NORMAL (normalized values with original mean and variance)
080|*      #STD    (standardized values with mean=0, std.dev=1)
081|*      #CENTER (centered values with mean=0)
082|*      #PROPORTION (values divided by their total sum)
083|*      #PERCENT    (100 times values divided by their total sum)
084|*      #TRUNCP (outliers specified by P are replaced by missing values)
085|*      #WINSP  (outliers specified by P are replaced by border values)
086|*      #TRUNCL (outliers specified by LEVEL are replaced by missing values)
087|*      #WINSL  (outliers specified by LEVEL are replaced by border values)
088|*@C
089|*In #TRUNCP and #WINSP 100(1-P)% of the observations are considered
090|*outliers. P is given by the specification P=<value> and default is 0.95.
091|*In #TRUNCL and #WINSL an observation X is an outlier if
092|*abs(X-mean) > level*stddev.
093|*Level is given by the specification LEVEL=<level> and default is 1.96.
095|*For example,
096|*VAR Y=#PERCENT(X) TO DATA1 / gives Y values as 100*X/Sum_of_X's
097|*VAR Y=#NORMAL(X) TO DATA1  / computes normalized X values as variable Y.
099|*  V = More information on VAR operation
100|%V=VAR?
101|*@SELECT
103|*TRANSFORM?
104|@TRANSFORM <data> BY <function of X>
105|*transforms all the active variables and observations (possibly limited
106|*by MASK, IND and CASES specifications) by <function of X> where X
107|*refers to one of the active variables in turn.
109|*TRANSFORM accepts the same functions as VAR. Thus functions
110|*sqrt,log,exp,sin,cos,tan,atn,abs,int,probit, and rnd are available.
111|*The 'if' structure is allowed:
112|*For example,
113|*TRANSFORM DATA1 BY if(X=9)then(MISSING)else(X)
114|*replaces all values '9' in active variables by missing values.
115|*Library functions and the control statement 'for' are not accepted.
116|*Although the same transformations can be made by VAR for each variable
117|*separately, use of TRANSFORM saves time and effort in systematic modi-
118|*fications of data values.
120|*For example,
121|*TRANSFORM YEAR88 BY log(X)
122|*replaces data values in data YEAR88 by their natural logarithms.
123|*@C
124|*The transformed values can be saved as other (possibly new) variables
125|*by using TRANSFORM in an extended form
126|@TRANSFORM <data> BY <function of X> AS <letter>:<type>
127|*where <letter> is a character to be placed in front of each transformed
128|*variable. The extension :<type> where <type> is 1,2,4 or 8 is optional
129|*and gives the type of new numerical variables. Default is 4.
130|*For example,
131|*TRANSFORM YEAR88 BY log(X) AS L
132|*VARS=Sales,Costs
133|*makes the logarithms of variables Sales and Costs as (new) variables
134|*LSales and LCosts.
135|*@C
136|*Also extra variables may be used in the transformation.                        C
137|*In order to speed up the process, in such cases a specification MODE=2
138|*should be entered.
139|*Example: "Proportions of events of Decathlon in percentages"
140|*>COPY <Survo>\U\D\DECA.SVO TEST.SVO
141|*MASK=--AAAAAAAAAA--
142|*MODE=2
143|*TRANSFORM TEST BY 1000*X/Points
144|*FILE SHOW TEST
145|*@C
146|*The active variables and observations can be centered and standardised
147|*by
148|*TRANSFORM <data> BY CENTERING
149|*and
150|*TRANSFORM <data> BY STANDARDISING (or STD),
151|*respectively.
153|*TRANSFORM <data> BY #UNIFORM(a,b)
154|*generates values from a uniform distribution on interval (a,b).
155|*For continuos variables (types 4,8) values will be from a continuos
156|*uniform distribution on (a,b).
157|*For discrete variables (types 1,2) values will be from a discrete
158|*uniform distribution with values a, a+1, a+2,..., b-1 .
159|*In huge datasets this alternative is many times faster than
160|*TRANSFORM <data> BY (b-a)*rand(seed)+a
161|*The pseudo-random number generator and its seed number can be selected by
162|*a RND specification. Example: RND=rand(1998115)
163|*@C
164|*@GOTO TRANSF2
165|*TRANSF2?
166|*TRANSFORM <data> BY #LINEAR(a,b) makes linear transformation X -> a*X+b .
167|*TRANSFORM <data> BY #DISTR(P)
168|*                    makes random values from a discrete distribution.
169|*                    The values (in ascending order) and probabilities
170|*                    are given as a matrix file P of two columns.
171|>HELP-TRANSF2 /                                     See |EXAMPLE| (in Finnish)  C
172|*In all applications of TRANSFORM where variables are transformed
173|*`in place' it is worthwhile to notice that transformations leading
174|*to decimal values (like log(X)) may be inaccurate in case of integer-
175|*valued variables (of type 1 or 2). In such a situation one should
176|*take a list of all active variables into the edit field by FILE STATUS,
177|*change types 1 and 2 to either 4 or 8, create (FILE CREATE) a new data
178|*file with this list of variables and copy (FILE COPY) the original data
179|*to this new data file. Transformations can then be made in the new data
180|*file.
182|*  M = Simulation of Markov chains by TRANSFORM                                 C
183|*  V = More information on transformations
184|%M=MARKOVD V=VAR?
185|*@SELECT
187|*MARKOVD?
188|*Simulation of Markov chains by TRANSFORM
190|*TRANSFORM <data> BY #MARKOV(P)
191|*                    makes random values according to a Markov chain.
192|*                    Each observation (variables X1,X2,...,Xm)
193|*                    will contain one realization of the chain
194|*                    and starts from state given by START=i (i=1,2,...).
195|*                    Default is START=1.
196|*                    The transition probabilities are given as
197|*                    a square matrix P.
199|*TRANSFORM <data> BY #MARKOV(P,<var>,<n>)
200|*                    works as the previous operation but only
201|*                    saves the state of the chain in <var>
202|*                    after <n> steps.
204|*Also Markov chains of degrees 2,3,...,8 can be simulated by the two            C
205|*TRANSFORM operations above. Then the P matrix has dimensions m^k,m,            C
206|*k=2,3,...,8. The start state is in these cases always the first one.           C
207|*See an example on the next page!                                               C
208|*@C
209|*.......................................................................
210|*Example: Simulation of a 3-state Markov chain of degree 2:                     C
211|*MATRIX P93
212|*///    A   B   C
213|*AA     0.6 0.4 0
214|*AB     0   1   0
215|*AC     0.2 0.2 0.6
216|*BA     0.6 0.2 0.2
217|*BB     0.2 0.2 0.6
218|*BC     0.2 0.2 0.6
219|*CA     1   0   0
220|*CB     0   0   1
221|*CC     0   0   1     / This is a final state!
223|*MAT SAVE P93
224|*FILE MAKE TEST,30,1000,L,S        / Space for 1000 chains of length 30
225|*TRANSFORM TEST BY #MARKOV(P93)    / Generating the chains RND=1111
226|*FILE LOAD -TEST / DELIMITER=NULL  / Loading the chains (3 first shown)
227|* ABBCAABBAABBAABBAAAABBBCCCCCCC
228|* AAAABBBAAAABBACCCCCCCCCCCCCCCC
229|* BBABBAABBAABBCBCBCBCCCCCCCCCCC
230|*@C
231|*  M = More information on Markov chains
232|*  V = More information on transformations
233|%M=MARKOV? V=VAR?
235|*RNDTEST?
236|@RNDTEST <SURVO_data>,<variable>,<output_line>
237|*makes empirical statistical tests on a series of numbers supposed to
238|*form a random sample from a uniform distribution in the interval (0,1).
240|*Most of these tests are explained in Volume 2 of "The Art of Programming"
241|*by Donald E. Knuth.
242|*The main application of RNDTEST is testing of various random number
243|*generators.
245|*A standard set of tests is performed without any extra specification.
246|*However, If RESULTS=0, no test is performed without explicit specifica-
247|*tions. To select tests in a more detailed form, following specifications
248|*can be given.
249|*@C
250|*RNDTEST: specifications
252|*SUBSAMPLES=<size>,<# of classes>
253|*The sample is divided systematically in subsamples of given <size>
254|*and their uniformity is tested by the standard Chi^2-test by divi-
255|*ding the interval (0,1) in <# of classes>.
256|*Also tests for mean=0.5 as well for the minimum ans maximum values
257|*in subsamples are made.
258|*Default is SUBSAMPLES=0 (i.e. this test is omitted).
260|*FREQUENCIES=<# of classes>,<lower limit>,<upper limit>
261|*The uniformity of the total sample is tested by the Chi^2-test.
262|*Default: FREQUENCIES=10,0,1
264|*MAXLAG=<largest_lag>
265|*The autocorrelations of the series are computed up to the given
266|*maximum lag. Default: MAXLAG=10
267|*@C
268|*RNDTEST: specifications
270|*GAPTEST=<lower_limit>,<upper_limit>,<max.gap>
271|*The lengths of gaps between occurrences of values in the given range
272|*are computed. Default: GAPTEST=0,0.5,10
275|*PERMTEST=<# of consecutive numbers (3,4,5,6 or 7)>
276|*Frequencies of different permutations of relative orderings are computed.
277|*Default: PERMTEST=4
279|*POKER=<# of obs.>,<# of classes>,<lower limit>,<upper_limit>
280|*Default: POKER=5,5,0,1
282|*COUPON=<# of classes>,<max_len>,<lower limit>,<upper limit>
283|*Coupon collector's test Default: COUPON=5,20,0,1
285|*Certain run tests are performed in any case.
287|*R = Simulation and random numbers
288|%R=CHANCE
