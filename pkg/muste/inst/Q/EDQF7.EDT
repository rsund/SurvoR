SURVO 98 edit field:    81       350       20 (32 bit version)
001|*SAVE EDQF7
002|*LOAD EDQ
003|*GOTO X
004|*FLOAD?
005|*FILE LOAD for loading data to the edit field or to a text file
007|*  1 = Loading observations of active fields (standard alternative)
008|*  2 = Loading names of variables conditionally on observed values              C
009|%1=FLOAD1 2=FLOAD2
011|*FLOAD1?
012|@FILE LOAD <Survo_data_file>,L
013|*loads the active fields of the data file in the edit field from the line
014|*L onwards. If L is omitted, the next edit line is used. IND and CASES
015|*specifications are also available. To indicate the fields to be loaded,
016|*a MASK specification may be used. If the name of the data file is
017|*preceded by a '-', the header lines are not printed in front of the data
018|*values.
020|*Missing values are shown as '-'s. Any <string> may be used as a missing        C
021|*value indicator in the output by giving specification MISSING=<string>.        C
022|*This option applies to numeric fields only.                                    C
023|*Example: MISSING=***                                                           C
025|*Unwanted characters are skipped by                                             C
026|*SKIP=<list_of_characters>. Example: SKIP=,"                                    C
027|*@C
028|@FILE LOAD <Survo_data_file> TO <text_file>
029|*moves the active fields of the data file to a text file.
030|*Also the header lines telling the name of the data file and the names
031|*of the fields will be moved.
032|*If <Survo_data_file> is preceded by a '-', the header lines are
033|*not moved. This is useful in situations where several parts of a data
034|*file has to be copied in a single text file.
035|*Each record will appear as a line terminated by a line feed character.
036|*@C
037|*In both forms above, fields in the output will be separated by a
038|*space character. To use another character instead of a space, give
039|*DELIMITER=<character>. Then all fields, except the the last one, will
040|*be terminated by <character>. To terminate the last field as well
041|*with <character>, give DELIMITER=<character>,1 .
042|*DELIMITER=TAB is the same as DELIMITER=char(9).
043|*If DELIMITER is used, both leading and trailing space characters
044|*in each field are replaced by a character given by
045|*SPACE=<space_character>. Those characters can be erased thereafter by TXTCONV.
047|*The spaces and commas in string variables may be replaced by other             C
048|*characters by using specifications STR_SPACE and STR_COMMA, respectively.      C
049|*For example, STR_SPACE=_ STR_COMMA=; makes the output suitable for             C
050|*plotting it as texts and labels (in GPLOT and PLOT).                           C
052|*By default names of fields are truncated according to the current format.
053|*By NAMES8=1 field names are copied to the normal length of 8 characters.
054|*NAMES8=2 works like NAMES8=1 but replaces the name of the first variable       C
055|*by blanks. This a useful option in making data tables for R, for example.     C
056|*@C
057|*The default format of the output is a data matrix (table). Other formats
058|*may be selected by a FORMAT specification. It has 3 different forms:
059|*1.  FORMAT=ORDER:<field_1>,<field_2>,...
060|*    reorders the fields for output.
061|*2.  FORMAT=LIST
062|*    gives the output in the form of a data list.
064|*3.  FORMAT=<name_of_format>
065|*    specifies that a special (multiline) format given in the current
066|*    edit field is to be used. This format has to be given in the form:
068|*    FORMAT <name_of_format>
069|*         one or several lines containing free text and field
070|*         descriptions of form    name_of_field: ###.##
071|*         or [name_of_field]
072|*    END
074|*    If ###.## is missing, the default format for the field is used.
075|*    In the latter case (name in brackets []) the default format is
076|*    always used and the value overwrites the name of the field.
077|*@C
078|*Example: (Results of FILE LOAD on line 41 appear from line 48 onwards.)
080|S 41 *FILE LOAD FINLAND,48 / FORMAT=PLAN1
S  |      77777777777777777777
081|* 42 *FORMAT PLAN1
082|* 43 *[Commune]                    [Province]
083|* 44 +[Popul]          [Births]
084|* 45 *--------------------------------------
085|* 46 *END
086|* 47 *
087|* 48 *Helsinki                     UUS
088|* 49 +483057           5851
089|* 50 *--------------------------------------
090|* 51 *Tampere                      HŽM
091|* 52 +165453           2084
092|* 53 *--------------------------------------
093|* 54 *Turku                        TUR
094|* 55 +164081           2330
095|* 56 *--------------------------------------
096|*     etc.
098|*@C
099|*Fields in format lines (lines 43-45 in the preceding example) can have
100|*various display attributes (shadow characters) and these attributes
101|*will be copied to each result line correspondingly. In this case,
102|*make sure that there is room enough for new shadow lines by using
103|*the REDIM command. Also control characters of format lines are copied.
104|*These features are valid only when data is loaded into the edit field.
106|*In the output of FILE LOAD, a code conversion is carried out by
107|*a specification FILTER=<conversion_file> where the 256 first bytes
108|*of the conversion file defines a characterwise mapping. This file
109|*is generated by using a CODES SAVE command (See CODES?).
111|*In this conversion, certain characters (usually blanks) are skipped
112|*(left out) by mapping them to decimal value 0.
114|*  D = More information on data management
115|%D=FILE?
116|*@SELECT
117|X
118|*FLOAD2?
119|@FILE LOAD <Survo_data_file>,L
120|*with specification
121|*LIST_VARIABLES=<case_var>,<lower_limit>,<upper_limit>
122|*and with optional MASK,VARS,IND,CASES,SELECT specifications
123|*lists field names (<case_var>) of selected observations
124|*and for each observation the names of variables having values
125|*within the range (<lower_limit>,<upper_limit>).
126|*................................................................................
127|*Example: Best events for the 7 first competitors in Decathlon:
128|*IND=ORDER,1,7                / Select cases
129|*MASK=--AAAAAAAAAA            / Select variables
130|*LIST_VARIABLES=Name,900,2000 / List variables with values >=900
131|*FILE LOAD <Survo>\U\D\DECA,CUR+1
132|*Skowrone: L_jump Hurdles Pole_vlt
133|*Hedmark : Hurdles Javelin
134|*Le_Roy  : L_jump Pole_vlt
135|*Zeilbaue: L_jump Pole_vlt
136|*Zigert  : Shot_put Pole_vlt
137|*Bennett : 100m 400m Pole_vlt
138|*Blinjaje: Pole_vlt
139|*................................................................................
140|*@C
141|*By default the names are listed in the short form (max. 8 characters).
142|*The names can also be listed with their extensions by giving an extra
143|*parameter T in LIST_VARIABLES.
144|*Then, if this extension contains also a format string of the form
145|*(##.###), for example, as the L_jump variable in DECA in the form
146|a  L_jump   Long jump                   (####) {500,1200}
147|*the #'s are replaced by the value of the variable.
148|*................................................................................
149|*Example: Best events for the 2 first competitors in Decathlon:
150|*IND=ORDER,1,2                / Select cases
151|*MASK=--AAAAAAAAAA--------
152|*LIST_VARIABLES=Name,900,2000,T / List variables with values >=900
153|*FILE LOAD <Survo>\U\D\DECA,CUR+1
154|*Skowrone
155|a  L_jump   Long jump                   ( 931) {500,1200}
156|a  Hurdles  110 meters hurdles          ( 903) {500,1200}
157|a  Pole_vlt Pole vault                  ( 981) {500,1200}
158|*Hedmark
159|a  Hurdles  110 meters hurdles          ( 914) {500,1200}
160|a  Javelin                              ( 975) {500,1200}
161|*................................................................................
162|*@C
163|*Limits <lower_limit>,<upper_limit> are the same for each variable by
164|*default. In any variable, however, these values may be replaced
165|*separately by giving a specification
166|*<name_of_variable>=<lower_limit>,<upper_limit>
167|*................................................................................
168|*Example:
169|*IND=ORDER,1,7
170|*MASK=--AAAAAAAAAAAA------
171|*LIST_VARIABLES=Name,900,2000
172|*Height=195,210 Weight=90,130 / Special limits for Height and Weight
173|*FILE LOAD <Survo>\U\D\DECA,CUR+1
174|*Skowrone: L_jump Hurdles Pole_vlt
175|*Hedmark : Hurdles Javelin Height Weight
176|*Le_Roy  : L_jump Pole_vlt Weight
177|*Zeilbaue: L_jump Pole_vlt
178|*Zigert  : Shot_put Pole_vlt Height Weight
179|*Bennett : 100m 400m Pole_vlt
180|*Blinjaje: Pole_vlt Weight
182|*  D = More information on data management
183|%D=FILE?
185|*AGG?
186|*Aggregation of observations in a Survo data file
188|*There are two operations for this task, FILE AGGRE and FILE AGGR
189|*with different options. Since they both require using of other
190|*FILE operations, the easiest way for typical aggregations is provided
191|*by the sucro /AGGRE which combines FILE AGGR with other necessary
192|*actions automatically.
194|*  1 = /AGGRE
195|*  2 = FILE AGGRE
196|*  3 = FILE AGGR
198|%1=/AGGRE? 2=AGGRE 3=AGGR
200|*AGGRE?
201|@FILE AGGRE <Survo_data_file>,<new_aggregated_file>
202|*combines observations in a Survo data file according to values
203|*of a selected grouping variable. Only variables activated by 'A'
204|*will be processed. The observations can be weighted by a selected
205|*variable activated by 'W'.
207|*Aggregation is controlled by an extra specification AGGRE having the
208|*form AGGRE=<grouping variable>,<SUM or MEAN>.
209|*The observations with the same value in <grouping variable> are combined
210|*either by summing the values of variables (SUM) or by computing their
211|*mean values (MEAN). If missing values occur in any active variable,
212|*the observation in question is left out.
214|*The aggregated observations are saved in a new Survo data file with
215|*the same structure as the original data file. If <new_aggregated_file>
216|*already exists, it is overwritten.
218|*To save the frequencies (or sums of weights, if 'W' variable exists),
219|*a specification FREQ=<name_of_variable> can be entered. This variable
220|*will be automatically created for the new aggregated file.
221|*@C
223|*Example:
224|*MASK=--W--AAA-AAA---     / 'Popul' is weight variable
225|*FILE AGGRE FINLAND,PROVS
226|*AGGRE=Province,MEAN  FREQ=Popul
228|*computes weighted means of 6 variables in provinces of Finland.
229|*The aggregated data set is saved in a new data file PROVS.
230|*Total population of each province will appear as 'Popul' in PROVS.
232|*  D = More information on data management
234|%D=FILE?
235|*@SELECT
237|*AGGR?
238|@FILE AGGR <data> BY <aggr_variable> TO <new_data_file>
239|*with a VARIABLES list forms a new data file
240|*by aggregating consecutive observations (with a same value
241|*in <aggr_variable>) according to different rules (functions).
243|*The VARIABLES list is given below the FILE AGGR operation line in the form:
244|*VARIABLES:
245|*A1 Function1 X1 Condition1
246|*A2 Function2 X2 Condition2
247|*.. ......... .. ..........
248|*END
250|*<data> must be sorted by <aggr_variable> before using FILE AGGR.
251|*In the VARIABLES list, A1,A2,... are names of aggregated variables.
252|*Also the type of a variable can be given as Sum:8, Name:S16.
253|*Possible functions are listed on the next page.
254|*X1,X2,... are names of variables in <data> to be aggregated.
255|*Conditions are given in the form a1*a2+...+b1*b2*... (as in SELECT)
256|*Each of terms a1,a2, etc. is given as a condition of type IND or CASES.
257|*@C
258|*Functions in FILE AGGR:
259|*N        Number of cases
260|*         Example: Nbig   N  -  Big / Big=Popul,30000,500000
261|*         `-' above means that N assumes no X variable.
262|*SUM      Sum of observations
263|*         Example: Popul:8  SUM  Popul
264|*MEAN     Arithmetic mean of observations
265|*STDDEV   Standard deviation
266|*MIN      Minimum value
267|*MAX      Maximum value
268|*#VALUES  # of different values (<data> must be sorted also with respect        C
269|*                                 to the X variable.)                           C
270|*FIRST    Value of the first observation within the aggregate
271|*         Typically, the name of the aggregate is copied by FIRST.
272|*         Example: Province FIRST Province
273|*LAST     Value of the last observation within the aggregate
274|*NMISS    Number of missing observations
275|*SUMS     Sum of observations. If any are missing, the result is missing.
276|*MISSING  Just a new variable with missing values is created.                   C
277|*                                   (To be continued on the next page)
278|*@C
279|*Functions in FILE AGGR (Continued):
280|*MODE          Mode of the observations                                         C
281|*MEDIAN        Median of the observations
282|*FRACTILE(p)   p-fractile of the observations (0<=p<=1)
283|*ORDER(k)      Observation Xk in the ordered sample X1<=X2<=...<=Xn
284|*              If k<0, observation X(n+k-1)
285|*              Example: ORDER(-1) is same as MAX.
286|*ORDERN(k,V)   Value of variable V for the kth observation
287|*              Example: Maxcomm ORDERN(-1,Commune) Popul
288|*TMEAN(k)      Trimmed mean when k largest and least cases are omitted
289|*TPMEAN(p)     Trimmed mean on rejection probability level p (0<p<0.5)
290|*CORR(V)       Correlation of the X and the V variable
291|*SLOPE(V)      Slope a in the regression model X=a*V+b+eps
292|*INTERCEPT(V)  Intercept constant b in the above regression model.
293|*              In the 3 last functions V can be replaced by ORDER i.e.
294|*              order 1,2,...,n of observation within the aggregate.
295|*An application of FILE AGGR is presented by the sucro
296|*/AGGRDEMO
297|>EDQ-AGGRDEMO /                   Activate AGGRDEMO BY clicking |EXAMPLE|       C
298|*  A = Using several aggregation variables                                      C
299|*  D = More information on data management
300|%A=SAVESORT D=FILE?
301|*@SELECT
303|*SAVESORT?
304|@FILE AGGR <data> BY <aggr_variable> TO <new_data_file>
305|*allows only one <aggr_variable>.
306|*In certain applications a combination of several variables is needed
307|*for this purpose. Although such a combination can be created by
308|*concatenating string variables (see VARSTR?), a more direct method
309|*is to use a specification
310|*KEY_SAVED=<string_variable>
311|*in the FILE SORT operation which normally precedes FILE AGGR since
312|*the data must be sorted by <aggr_variable>.
313|*KEY_SAVED in FILE SORT creates a <string_variable> if needed
314|*in the <new_data_file> and saves the combined sort keys in it.
315|*All components of the sort key must in this case be string variables.
316|*If not, it is easy to make string variables from numeric ones
317|*(by VAR XS:S3=X TO <data>, for example).
319|*The example on the next page shows how this works with data file
320|*FINLAND.
321|*@C
322|*KEY_SAVED=AIS / Sort keys to be saved as variable AIS
323|*FILE SORT FINLAND BY Agri,Industry,Service TO FIN2
325|*FILE AGGR FIN2 BY AIS TO FIN_AGGR
326|*VARIABLES:
327|*AIS:S3 FIRST AIS
328|*N:2    N     -
329|*Mean:4 MEAN  Tax
330|*END
331|*................................................................................
332|*FILE LOAD FIN_AGGR / IND=ORDER,1,5          5 first cases loaded
333|*DATA FIN_AGGR*
334|* AIS      N        Mean
335|* 018      2      15.000
336|* 027      5      15.700
337|* 035      5      16.200
338|* 036     10      16.325
339|* 044      7      15.657
341|*  A = More information on FILE AGGR
342|*  D = More information on data management
343|%A=AGGR D=FILE?
