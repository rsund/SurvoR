SURVO 98 edit field:    81       150       20 (32 bit version)
001|*SAVE EDQL3
002|*LOAD EDQ
003|*ARITED?
004|*Functions defined in the edit field:
005|*Functions of one or up to 10 variables may be defined by the user
006|*by entering a definition of the form
007|*   <function_name>(X1,X2,...):=function_of_X1,X2...
008|*in the current edit field.
009|*Examples: sinh(X):=(exp(X)-exp(-X))/2
010|*          norm(X,Y):=sqrt(X*X+Y*Y)
011|*          Fisher(r):=0.5*log((1+r)/(1-r))
012|*       Roots of equation X^2+P*X+Q=0:
013|*          Root1(P,Q):=-P/2+S(P,Q)   S(P,Q):=sqrt(P*P/4-Q)
014|*          Root2(P,Q):=-P/2-S(P,Q)
015|*       The Least Common Denominator: lcd(u,v):=u*v/gcd(u,v)
016|*Any function defined in such a way may be used as any standard function.
017|*Examples:
018|*          sinh(1)=1.1752011936
019|*          norm(12,norm(3,4))=13
020|*          Root1(1,-6)=2   Root2(1,-6)=-3
021|*          lcd(144,240)=720
022|*@C
023|*Recursive functions:
024|*By means of the if()then()else() structure recursive definitions for
025|*functions may given as follows:
026|*     factorial(N):=if(N=1)then(1)else(N*factorial(N-1))
027|*  Serial expansion of the exponential function:
028|*     expn(X,N):=if(N=0)then(1)else(expn(X,N-1)+term(X,N))
029|*     term(X,N):=if(N=1)then(X)else(term(X,N-1)*X/N)
030|*Examples:
031|*          factorial(7)=5040
032|*          expn(1,20)=2.7182818285
033|*........................................................................
034|*Since recursive computations take much space and time,
035|*it is more efficient to use the 'for' statement for definitions
036|*above:
037|*     factorial(N):=for(I=1)to(N)product(I)
038|*     expn(X,N):=for(I=0)to(N)sum(X^I/factorial(I))
039|*Another way to speed up recursive computation is to employ a
040|*`remember' option (see next page).
041|*................................................................................
042|*@C
043|*A recursive function can also be defined as follows:
044|S     factorial(N)|=if(N=1)then(1)else(N*factorial(N-1))
S  |                  8
045|*See a '|' instead ':' in the definition! Then each numerical value
046|*once obtained in recursion process is saved temporarily in a table
047|*and instead of a recursion step a table-lookup is used in subsequent
048|*evaluations. Computation of function values is then much faster.
050|*Recursive computing requires much stack memory and may lead to
051|*a stack overflow. The stack size given for the Survo Editor is
052|*currently 10'000'000 bytes. The system parameter check_stack
053|*(in SURVO.APU) determines the maximum size allowed in editorial
054|*arithmetics. The default setting is check_stack=5000000 and it
055|*can be changed temporarily by the SYSTEM command.
056|>HELP-RECUR /                                               See |EXAMPLE|       C
057|*@GOTO M
058|*M?
060|*  E = More information on editorial computing
061|%E=ARIT?
062|*@SELECT
064|*ARITIF?
065|*Conditional expressions may be given in the form
066|*     if(<condition>)then(<expression>)else(<expression>)
067|*<condition> can be any of the forms: a<b a<=b a=b a>=b a>b and a<>b
068|*Example: Y=if(X<0.5)then(0)else(1)
069|*@GOTO M
071|*ARITFOR?
072|*Sums products and maxima of expressions of one or more variables
073|*can be computed by the 'for' statement in editorial computing.
074|*The general structure is
075|*   <variable>=for(I=N1)to(N2)<sum|product|max|maxt>(<expression>)
076|*or
077|*   <variable>=for(I=N1)to(N2)term(T=A)<sum|product|max|maxt>(<expression>)
079|*Examples:
080|*s=for(i=1)to(100)sum(i)  s=5050
081|*sum(N):=for(I=1)to(N)sum(1/I/I)  sqrt(6*sum(3000))=3.1412743806
082|*factorial(N):=for(I=1)to(N)product(I)  factorial(10)=3628800
083|*expn(X,N):=for(I=1)to(N)term(T=1)sum(T*X/I)
084|*           N terms from the serial expansion of exp(X)-1.
086|*@GOTO M
088|*ARITM?
089|*Several expressions may be activated simultaneously by placing a '.'
090|*in front of '=' in all expressions which should be computed.
091|*Simultaneous activation takes place by activating one of the
092|*expressions in a normal way.
093|*For example, by activating sqrt(X).= below
094|*........................................................................
095|*          X=5  pi=3.14159265359
096|*          sqrt(X).=_                     log(X)/X.=
097|*          X/10.=                         tan(pi*X/3).=
098|*          X*X=  (. missing)              X*X.=
099|*........................................................................
100|*the display will be changed to
101|*........................................................................
102|*          X=5  pi=3.14159265359
103|*          sqrt(X).=2.2360679775          log(X)/X.=0.32188758248682
104|*          X/10.=0.5                      tan(pi*X/3).=-1.7320508076
105|*          X*X=   (. missing)             X*X.=25
106|*........................................................................
107|*@G M
109|*ARITINT?
110|*Integral of function f(x) in the interval (a,b) is computed using
111|*Simpson's rule by the `integral' statement of the form
112|*   <variable>=integral(f(x))from(a)to(b)
113|*or in extended forms
114|*   <variable>=integral(f(x))from(a)to(b)eps(eps) ,
115|*   <variable>=integral(f(x))from(a)to(b)eps(eps)n(n) .
116|*The original range (a,b) is split by 2^n equidistant points using
117|*n=1,2,3,... until the relative error is <eps or the optional n value
118|*is achieved. Default values are eps=1e-10, n=12.
119|*Examples:
120|*................................................................................
121|*      a=0 b=1 eps=0.0001 pi=3.141592653589793 infinity=10
122|*   I1=integral(x^2)from(a)to(b)eps(eps)
123|*   I2=integral(exp(-x*x/2)/sqrt(2*pi))from(-infinity)to(0)
124|*   I1.=0.33333333333333
125|*   I2.=0.5
126|*@C
127|*................................................................................
128|*Number of prime integers less than N ( here N=1000000 ) can be roughly
129|*approximated by the integral
131|*integral(1/log(x))from(2)to(N)eps(0)n(17)=78627.636537002
133|*while the true number is 78498.
134|*@G M
