SURVO 98 edit field:    73       440       60 (32 bit version)
001|*SAVE EDQW7
002|*VMFEDIT?
003|*The MFEDIT operation   written by Markku Korhonen (HUCC)
S  | 111111111111111111111
005|*Editing and displaying several Survo data files at a time
007|*Further information:
008|* 1 = Introduction, assignements for Survo data files
009|* 2 = Fields on forms
010|* 3 = Options in the MFEDIT operation
011|* 4 = Validity checks of field values (FEDIT and MFEDIT)
012|* 5 = Designing the forms in MFEDIT
013|* 6 = Transformations in MFEDIT
014|* 7 = The MFEDIT keyboard
015|* 8 = Protection of (old) observations
017|* D = More on data analysis
018|* E = More information on SURVO 84 EDITOR
020|%1=VMFINTRO 2=VMFIELDS 3=VMFOPTS 4=VMVALCHK 5=VMFRMDSG @
021|%6=VMTRANSF 7=VMFKEYS? 8=VMFPROT D=STATIS?   E=EDITOR? @
022|*@SELECT
024|*VMFINTRO?
025|*Introduction
S  | 111111111111
027|*With the MFEDIT operation you may display and edit several SURVO 84C
028|*data files at a time. The condition for the operation is that there
029|*must be a relation between those data files. The relation is
030|*indicated by key variables.
031|* In the MFEDIT operation, information is displayed, edited and entered
032|*on forms in the same way as in the FEDIT operation. In MFEDIT each
033|*form may be divided into subforms. Different files may be assigned to
034|*subforms. The size of a form is not limited to the size of the
035|*screen. For instance, one may design a form which has 120 rows and
036|*100 columns.
037|* Further, the user may have a set of forms which are displayed one at
038|*a time. When new values are entered, MFEDIT automatically checks that
039|*the values are not in contradiction with the type of the field.
040|*Additional validity checks may be defined, e.g. by listing valid
041|*values for some fields. @C
043|*The form of the MFEDIT operation is
045|*MFEDIT <form file>
046|*FILE1=<Survo data file>(<list of keys>)
047|*FILE2=<Survo data file>(<list of keys>)
048|*...
049|*<options>
051|*THE FORM FILE
052|*The forms are defined by a separate ASCII file. Their maximum record
053|*length is 253 characters. Each form may be divided into subforms.
054|*Usually, each Survo data file has its one subform and within one
055|*subform, only variables of one data file are referred to. You can use
056|*the SURVO 84C editor to create and edit it (unlike FEDIT, MFEDIT
057|*cannot create a default form file). @C
059|*SURVO DATA FILES
060|*Survo data files must be given in the order defined by their hie-
061|*rarchy (if such exists). All data files must exist; MFEDIT cannot
062|*create them. After the name of the data file the keys defining the
063|*relation between files are given in parentheses in such an order
064|*that the primary keys are given first.
066|*By default, the program expects that the corresponding keys have the
067|*same names in different files; otherwise the correspondency must be
068|*given. If that is not the case, then the correspondency is defined
069|*by giving both names separated by a vertical bar in either of the
070|*files (the name existing in that file must be given first), e.g.
072|*MFEDIT federat.txt
073|*FILE1=Society(Scode|Society)
S  |                    11111111
074|*FILE2=Persons(Personid)
075|*FILE3=Members(Society,Personid)  @C
076|*Up to 7 assignments can be given to MFEDIT by the FILEn specifica-
077|*tions. Each assignment may refer to different files or some of them
078|*may refer to the same file. Up to 10 different key variables can
079|*exist in these assignments.
081|*By default, the program assumes that last file (given by FILE3 in the
082|*example) is of primary interest, here named as a target file. During
083|*the session, the target file can be changed by pressing the F4 key.
085|*OPTIONS
086|*With various options the user may specify the order in which the
087|*observations are shown, the preliminary work of the program, the size
088|*of the forms and some other limits of the program. One can also de-
089|*fine that lowercase letters should be changed to capital letters.  @C
090|*Fields on forms
S  | 111111111111111
092|*Like FEDIT there are two kind of fields that may exist on forms:
093|*  (1) standard fields and
S  |   1111111111111111111
094|*  (2) selection fields.
S  |   111 1111111111111111
096|*   M = More information on MFEDIT operation
097|%M=VMFEDIT @
098|*@SELECT
100|*VMFIELDS?
101|*Fields on forms: Two kind of fields may exist on forms:
S  | 111111111111111
103|*  (1) standard fields and
S  |   1111111111111111111
104|*  (2) selection fields.
S  |   111 1111111111111111
106|*In standard fields, each field corresponds to a variable in a Survo
S  |    666666666666666
107|*data file. The desired value of the variable is written on the field.
108|*The field length is defined by the type of the variable.
110|*In the case of selection fields, the alternatives for values of a
S  |                6666666666666666
111|*(group of) variable(s) are written on the form. The user selects one
112|*or more of the alternatives by pressing the Return key. The number of
S  |                                             666666
113|*selections in a selection group equals to the number of variables in
114|*the Survo data file assigned to this selection group. Free selection
S  |                                                       1111
115|*fields may be used for those situations where all possible choices
116|*cannot be written out.
118|*   M = More information on MFEDIT operation
119|%M=VMFEDIT @
120|*@SELECT
122|*VMFOPTS?
123|*Options in the MFEDIT operation
S  | 11111111111111111111111111111111
125|*ORDER   If ORDER=ORIG is specified, then the observations in
126|*        the target file are displayed in the original order. During
127|*        the session, the user can switch back to the sorted order
128|*        by pressing F6 (if the sorted keys have been saved before).
130|*OPTIONS If OPTIONS=NOSORT is specified, then the key values are
131|*        are neither copied nor sorted in the memory. It follows
132|*        that the observations in the target file are displayed
133|*        in the original order only.
135|*CAPS    The default behaviour for changing the small letters @C
136|*MAXCOLS Maximum number of columns in the forms (49<maxcols<254)
137|*        (default: found maximum length; option rarely needed)
138|*MAXROWS Maximum number of rows in the forms (default: found
139|*        maximum number of rows; option rarely needed)
140|*MAXCHOICES  Maximum number of selections in one group (default 50)
142|*SELECTGROUPS  IF SELECTGROUPS=ROWPAIR is specified and if several
143|*         selection groups (with a single selection) are located
S  |                                   1111111111111111
144|*         one after the other then after the selection the cursor
145|*         is moved to the choice of the next group located in
146|*         the same row (if exists) - not to the first choice.
148|*         IF SELECTGROUPS=PAIRED is specified then the cursor is
149|*         moved to the choice of the next group having the same
150|*         order number (not necessarily in the same row).
152|*         For multi-selection groups SELECTGROUPS has no effect!
154|*   M = More information on MFEDIT operation
155|%M=VMFEDIT @
156|*@SELECT
158|*VMVALCHK?
159|*Validity checks of field values (FEDIT and MFEDIT)
S  | 11111111111111111111111111111111
161|*Validity checks for the entered values may be defined by RESTR
162|*statements in the form file.
164|*  For numeric variables, the minimum and maximum values or
165|*  a list of valid values may be given.
167|*  For string variables, only a list of valid strings can be given.
169|*Each RESTR statement ends with a ENDRESTR statement. These
170|*statements are placed after the ENDTEXT statement. @C
171|*Examples:
173|*RESTR:  MIN(vble1,vble2,vble3)=0;
174|*        MAX(vble1,vble2)=99; MAX(vble3)=999;
175|*        vble4=0,1,2
176|*        vble5=0(1)9
177|*        vble6='AGFA','FUJI','KODAK';
178|*ENDRESTR;  @C
179|*With one MIN or MAX definition, several variables having the same
180|*minimum (maximum) value may be given. Note that the string values
181|*are given in apostrophes. If the values of a numeric variable are
182|*equally spaced then an abbreviated notation may be used, e.g. the
183|*specification 0(1)9 yields the same as 0,1,2, ..., 9.
185|*If validity checks are defined for a field and the type value does
186|*not fill the given conditions, an error message is given. Only valid
187|*values are written into the data file.
189|*The CAPS specification may be used to alter the default behaviour for
190|*each variable separately while small letters are entered. The default
191|*behaviour for all variables may be given by the CAPS option of the
192|*FEDIT or MFEDIT operation. Example:
194|*RESTR  CAPS(vble6,vble7,vble8)=Y   ENDRESTR;
196|*The given value Y defines that for the three variables entered
197|*lowercase letters are transformed to capital letters. If the user
198|*had given the FEDIT option CAPS=1 in the edit field, then he might
199|*define for some variables that no transformation should be done.
200|*In that case, the letter N would be used instead of Y.
202|*   F = More information on FEDIT operation
203|*   M = More information on MFEDIT operation
204|%F=VFEDIT?   M=VMFEDIT?  @
205|*@SELECT
207|*VMFRMDSG?
208|*Designing the forms in MFEDIT
S  | 11111111111111111111111111111
210|*The form definitions are given in MFEDIT by a separate ASCII file,
211|*a form file. The form is divided into subforms which are indicated
212|*by the SUBFORM and ENDSUBFORM statements. The structure of the form
213|*file in MFEDIT is the following:
215|*FORM(name of the form):
S  | 1111
216|*SUBFORM(name of subform): FILE <name of data file><protection opt>;
S  | 1111111
217|*SELECT:
218|*   < definition of variables corresponding to each
219|*     (multi)selection group >
220|*ENDSELECT;
221|*TRANSF:   <definition of automatic transformations>
222|*ENDTRANSF;
223|*TEXT:
S  | 11111
224|*      <definition of the ordinary form>
225|*ENDTEXT;
S  | 11111111
226|*RESTR:
227|*      <definition of valid variable values>
228|*ENDRESTR;
229|*ENDSUBFORM  @C
S  | 1111111111
231|*SUBFORM(name of 2. subform):  FILE <name of data file>;
S  | 1111111
232|*  ....
233|*ENDSUBFORM
234|*...
235|*ENDFORM;
S  | 11111111
236|*FORM(name of the next form):
S  | 1111
237|*...
238|*ENDFORM;
S  | 1111111
239|*ENDOFFILE;
S  | 1111111111
241|*The form file in the following example consists of one form
242|*with two subforms: @C
244|*FORM(F1):
245|*SUBFORM(Customer)  FILE Customer;
246|*TEXT:
247|*  Customer I.D.: &Customid
248|*  First name: &Fname
249|*  Last name:  &Lname
250|*  Street: &Street
251|*  Postal code: &Postcode    City: &City
252|*  Country: &Country
253|*ENDTEXT;
254|*ENDSUBFORM;
255|*SUBFORM(Delivery)  FILE Delivery;
256|*TEXT:
257|*  Product code: &Prodcode            Customer code: &Customid
258|*  Date of delivery, Year: &Year  Month: &Month  Day: &Day
259|*  # of items deliverd: &Nofitems   Unit price: &Unitprce
260|*ENDTEXT;
261|*ENDSUBFORM;
262|*ENDFORM;
263|*ENDOFFILE; @C
264|*Each subform definition starts with SUBFORM keyword followed by a
265|*short name (maximum 8 characters) in parentheses. Next, the name of
266|*the Survo data file or logical reference (FILE1, FILE2 ...) is given
267|*by the FILE statement. The file (or logical) name may be followed
268|*by a protection option.  Each SUBFORM statement generates the
269|*upper border of the subform. The border consists of the name of
270|*the Survo data file, the current record sequenece number, the form
271|*and the subform names. The middle part of the border is reserved
272|*for certain status information (e.g. which file is the target file).
274|*Instead of the file name given in the FILE statement, the
275|*corresponding logical name (FILE1, FILE2) may be given. If the same
S  |               111111111111
276|*data file is assigned to several forms, then logical names must be
277|*used for linking the subforms to the right FILEn specifications. @C
278|*The contents of the subform are defined by the lines between the key
279|*words TEXT and ENDTEXT:
281|*    The left margin of a standard field is given by the character
S  |                        1111111111111111
282|*    & followed by the variable name. The length of the field is
S  |     1
283|*    defined by the length of the variable:
285|*      1 byte numeric variable - field length is 3
286|*      2         "                      "        6
287|*      4 byte real type numeric variable - field length is 7
288|*      8         "                                 "      14
289|*      string variables - field length is the maximum length of
290|*      the variable defined in the Survo data file. @C
292|*By default fields in a form refer to the Survo data file given by
293|*the FILE statement. However, a standard field may refer to another
294|*file too. In that case the logical file reference must be given
295|*after the variable name in parenthesis, e.g.
297|*    &price(F1)    or   &price(FILE1)
299|*   If the subform includes selection fields, then a SELECT statement
S  |                            1111111111111111
300|*   is needed to declare the symbols of the selection groups, the
301|*   number of selections allowed and the names of variables, where
302|*   the selected values will be saved, e.g. (on the next page) @C
303|*FORM(F1):
304|*SUBFORM(Persons)  FILE Persons;
305|*TEXT:
306|*  PERSON FORM:
307|*  Person I.D.: &Personid
308|*  Family name: &Name1
309|*  First name:  &Name2
310|*  Street: &Street
311|*  Postal code: &Postcode       City: &City
312|*ENDTEXT;
313|*ENDSUBFORM;  @C
314|*SUBFORM(exhibits)  FILE exhibits;
315|aSELECT @1 1 TO Classif;  ENDSELECT;
S  | 111111                   1111111111
316|*TEXT:
317|*  EXHIBITS
318|*  Person I.D.: &Personid       Exhibit code: &Exhibcde
319|*  Title of the exhibit: &Exhtitle
321|*  The classification of the exhibit:
322|a  @1<Traditional>    @1<Postal History>  @1<Postal Stationery>
S  |   111           1
323|a  @1<Aerophilately>  @1<Thematic>        @1<Maximaphily>
324|*  The 1st subclassification: &Subcl1
325|*  The 2nd subclassification: &Subcl2
326|*ENDTEXT;
327|*ENDSUBFORM;  @C
328|*SUBFORM(Particip)     FILE particip;
329|aSELECT @2 1 TO Class; @3 1 TO Prize; @4 1 TO Specprze; ENDSELECT;
330|*TEXT:
331|*  Participations to exhibits
332|*  Person I.D.: &Personid    Exhibit code: &Exhibcde
333|*  Date of exhibition (yy-mm-dd): &Date
334|*  Exhibition name: &Exhname
335|a  Class:  @2<Champion>   @2<Competitive>
336|*  Prize awarded:
337|a   @3<LargeGold>   @3<Gold>   @3<LargeVermeil>  @3<Vermeil>
338|a   @3<LargeSilver> @3<Silver> @3<SilverBronze>  @3<Bronze>  @3<None>
339|a  Special Prize: @4<None>  @4<Special>  @4<Felicitat>
340|*ENDTEXT;
341|*ENDSUBFORM;
343|*In the TEXT statement, a selection field starts with the symbol
344|*of the corresponding selection group (defined in SELECT statement)
345|*and the corresponding value to be saved is given between the
346|*characters < and >.  @C
347|*Free selection fields are given by <?>. The field length of a
348|*selection field is defined by the type of the corresponding variable.
350|*Validity cehecks for field values may be defined by RESTR statements.
352|*M = More information on MFEDIT operation
353|%M=VMFEDIT   @
354|*@SELECT
356|*VMTRANSF?
357|*Numerical transformations in FEDIT or MFEDIT may be defined by the
S  | 1111111111111111111111111
358|*TRANSF statement, which is placed before the TEXT statement. An example:
S  | 111111
360|*TRANSF: Newvbl1=(Score1-Score2)^2/(Score3-Score4)^2;
361|*        Logsum=LOG(Price1+Price2+Price3); ENDTRANSF;
363|*Note that each transformation ends with a semicolon. These
364|*transformation may involve besides arithemitic operations the
365|*following mathematical functions ABS, SQRT, EXP and LOG. If a
366|*variable used in arithmetic operations or in mathematical functions
367|*has a missing value then the resulting value is always missing. The
368|*missing values are handled differentely by the special functions MAX,
369|*MIN, SUM, MEAN and DEV, e.g. the statement
371|*     Newvbl2=MEAN(Score1,Score2,Score3,Score4);
373|*computes mean of the non-missing values of the four variables. @C
374|*A transformation may be conditioned by an if-then-else statement,
375|*e.g.
377|*TRANSF: If Price1>Price2 and Price3>Price4
378|*           then X1=Price1+Price3 else X1=Price2+Price4;
379|*          If City="HELSINKI" or City="Espoo"
380|*           then Cityarea=1 else Cityarea=0;  ENDTRANSF;
382|*For numeric variables the following six conditional operators are
383|*available:
385|*  >    "greater than"
386|*  >=   "greater than or equal to"
387|*  =    "equal to"
388|*  <=   "less than or equal to"
389|*  <    "less than"
390|*  <>   "not equal"  @C
392|*String variables may be used in the conditional expression too (but
393|*not in the ordinary transformation statement). For string variables
394|*only the operators "equal" and "not equal" are available. Several
395|*conditions can be joined either by AND or OR operators but both types
396|*must not be used in the same if statement. The then and else parts
397|*may involve one transformation statement only.
399|*To indicate missing values in transformations the symbol MISSING may
400|*be used, e.g.
402|*TRANSF if Dpros=MISSING then Dpros=0;
403|*       if Treatmnt<1 then Treatmnt=MISSING; ENDTRANSF;
405|*     By default, MFEDIT assumes that the variables used
406|*     in transformatios refer to the default file of that subform.
407|*     Variables in other files may be referred by giving the logi-
408|*     cal file reference in brackets, e.g.
410|*     TRANSF: Totprice=Nofitems*Unitprce[F2];  ENDTRANSF;  @C
411|*The defined transformations are computed for the current observations
412|*just before the form is shown on the screen and each time any of the
413|*fields on the form is changed. Therefore, the transformations must be
414|*such that they can be performed several times without getting wrong
415|*results. A necessary condition is that the left-hand and righthand
416|*sides of transformation equations have no common variable. The prog-
417|*ram does not check this feature!
419|*   F = More information on FEDIT operation
420|*   M = More information on MFEDIT operation
421|%F=VFEDIT?   M=VMFEDIT?  @
422|*@SELECT
424|*VMFPROT?
425|*Earlier written observations may be protected against changes by
426|*mistake by adding the key word PROTECTED after file name in the
427|*FILE statement, e.g.
428|*    FILE FILE1 PROTECTED;
429|*A given number of observations may be protected by stating the
430|*number of protected observations after the keyword:
431|*    FILE FILE1 PROTECTED 266;
432|*At this moment the state of protection cannot be changed during
433|*the MFEDIT session.
435|*M = More information on MFEDIT operation
436|%M=VMFEDIT   @
437|*@SELECT
