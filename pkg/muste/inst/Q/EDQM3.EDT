SURVO 98 edit field:    81       300       20 (32 bit version)
001|*SAVE EDQM3
002|*LOAD EDQ
004|*MATSAVE?
005|*Matrices to be processed by MAT operations have to be saved in matrix
006|*files. The MAT SAVE operation does this job both for matrices written
007|*in the edit field and for matrices coming from various Survo files.
008|*  A = Saving matrices from the edit field
009|*  B = Moving matrices from Survo data files to matrix files
011|*  M = More information on MAT operations
012|%A=SAVE1 B=MATDATA M=MATO?
013|*@SELECT
014|*SAVE1?
015|*A matrix to be saved in a matrix file has to be represented in either
016|*of the two forms below:
018|*   11 *    2x3 matrix A without row and column labels:
019|*   12 *MATRIX A ///
020|*   13 * -1.45  2.33 -5.00
021|*   14 *  0.91  3.07  2.28
022|*   15 *
023|*   16 *    2x3 matrix B with row and column labels:
024|*   17 *MATRIX B
025|*   18 *///    Y1   Y2   Y3
026|*   19 * X1  12.2 33.6  6.1
027|*   20 * X2   3.9  0.0 18.7
028|*   21 *
030|*In both cases the line after the last row in the matrix must be left
031|*empty or it has to start with word END. @C
032|*To save a matrix A located in the edit field, activate
033|*MAT SAVE A
034|*and the first matrix in the current edit field starting with MATRIX A
035|*will be saved in matrix file A.MAT on the current data disk.
036|*To save matrix A in matrix file TEST.MAT, activate
037|*MAT SAVE A TO TEST.
038|*Hence MAT SAVE A is equivalent to MAT SAVE A TO A.
040|*A direct way to save a matrix without a MATRIX label is
041|*   11 *
042|*   12 *MAT SAVE AS A                                                           C
043|*   13 * -1.45  2.33 -5.00
044|*   14 *  0.91  3.07  2.28
045|*   15 *
046|*@C
047|*Also general and rowwise comments can be given                                 C
048|*as shown by the following schematic example:
050|*MATRIX A
051|*This is a general comment 1.
052|*This is a general comment 2.
053|*A
054|*///  C1  C2  C3
055|*R1   11  12  13
056|*R2   21  22  23 / This a comment on line R2.
057|*R3   31  32  33 / This a comment on line R3.
058|*R4   41  42  43
060|*MAT SAVE A / Saving A
062|*If the matrix is loaded by MAT LOAD A, the comments will appear
063|*in their proper places.
064|*This feature is useful especially in result matrices like RG.M
065|*in REGDIAG making the output self-documenting. (See REGDIAG?:M)
066|*@C
067|*Symbolic constants in matrices
068|*A matrix to be saved from the edit field may also have expressions
069|*of symbolic constants as elements. For example,
070|*   11 *
071|*   12 *   r=sqrt(1/n) n=4
072|*   13 *MATRIX R ///
073|*   14 * 1    r    r^2  r^3
074|*   15 * r    1    r    r^2
075|*   16 * r^2  r    1    r
076|*   17 * r^3  r^2  r    1
077|*   18 *
078|*defines a 4*4 matrix which can saved by MAT SAVE R. Please, note that
079|*R will be saved in numerical form only. If r is altered, MAT SAVE R
080|*must be activated again.
081|*@G MM
083|*MM?
084|*  S = More information on MAT SAVE
085|%S=MATSAVE
086|*@SELECT
088|*MATDATA?
089|@MAT SAVE DATA <Survo data> TO <matrix file>
090|*saves a Survo data file (active fields) or a part of it to a matrix
091|*file. The specifications VARS, MASK, CASES and IND are available for selecting
092|*variables and observations to be moved. If the first active field is a
093|*string field it will be used as the row label. Otherwise the rows are
094|*labelled numerically. The columns are always labelled by the
095|*corresponding field names (abbreviated to 8 first characters).
097|*Since in many applications the order of columns (variables) is important,
098|*it can be changed either by specifying the variables in desired order
099|*by VARS or by observing the fact that MAT SAVE DATA sorts the columns
100|*in alphabetic order with respect of their activation mask symbols.
101|*For example, MASK=AYY-XX specifies the order 1,5,6,2,3 (4 omitted)
102|*of columns (variables).
104|*  S = More information on MAT SAVE
105|*  M = More information on multivariate statistical analysis
106|%S=MATSAVE M=MULTI?
107|*@SELECT
109|*MATLOAD?
110|@MAT LOAD <matrix file>,<format>,L
111|*loads <matrix file> to the edit field using the optional <format>.
112|*L will be the first line in the edit field for the loaded matrix.
113|*Examples: MAT LOAD R,##.###,10     MAT LOAD R,20
114|*If <format> is omitted, a proper format will be sought automatically.
115|*MAT LOAD <matrix file>                                                         C
116|*loads <matrix file> immediately after the command line.                        C
118|*Also parts (submatrices) may be loaded as follows:
119|*MAT LOAD R(6:10,1:5),10
120|*loads a submatrix of R consisting of the rows 6-10 and of the columns 1-5.
122|*For temporary displays of matrix files use /MATSHOW <matrix_file> or           C
123|*/MATSHOW <matrix_file>,<format>. Example: /MATSHOW CORR.M,12.123               C
125|*  L = LOADM operation for output in partitioned form
126|*  A = Elements of matrices in editorial computing
127|*  M = More information on MAT operations
128|%L=LOADM A=MATARIT? M=MATO?
129|*@SELECT
131|*LOADM?
132|@LOADM <matrix_file>,<format>,L
133|*works in principle like MAT LOAD but writes the matrix in the edit
134|*field (and in the output file) in block form where the width of each
135|*block is limited by the visible part of the edit field.
136|*The number and order of rows and columns to be written can be selected
137|*by ROWS and COLUMNS specifications. For example, ROWS=3,2,1,4 informs
138|*that rows 3,2,1,4 only and in this order will be written.
140|*To emphasize exceptional elements of the matrix (like high loadings
141|*of a factor matrix) in the display, specifications LIMITS and SHADOWS
142|*can be used.
143|*Another alternative is to use the SHADOW_MATRIX specification as shown in
145|*LIMITS gives a list of upper bounds of various classes and SHADOWS
146|*gives a list of corresponding shadow values.
147|*Example: LIMITS=-0.7,-0.3,0.3,0.7,1
148|*         SHADOWS=7,1,0,1,7  (0=normal display)
149|*Another alternative is to use the SHADOW_MATRIX specification as shown in
150|>HELP-LOADM_S /                                             See |EXAMPLE|       C
151|*@C
152|*Formats of elements in LOADM:
153|*Parameter <format> is given in one of the following ways:
155|*1. LOADM <matrix_file>,12.1234,L
156|*   writes elements with 2 places in the integer part and with 4 decimals.
158|*2. LOADM <matrix_file>,(10),L                                                  C
159|*   gives elements with 10 characters according to the maximum element          C
160|*   by absolute value. Thus when the greatest value is 1998.261213,             C
161|*   the selected format corresponds to 1234.1234 (if negative values            C
162|*   appear in the matrix) or to 1234.12345 (if not).                            C
163|*                                                                               C
164|*3. LOADM <matrix_file>,(C10),L                                                 C
165|*   works as the previous alternative but the format is selected                C
166|*   separately for each column of the matrix.                                   C
167|*@C
168|*@G LOADM2
170|*LOADM2?
172|*Extended form of LOADM especially for factor matrices                          C
173|*according to the style suggested by Lauri Tarkkonen:                           C
175|@LOADM <matrix_file>,<format>,L
176|*with specifications LIMITS, SHADOWS, SORT, COLUMNS, SUMS, POSDIR, WIDE
177|*writes a (rotated factor) matrix in the edit field by
178|*  1. sorting (SORT) the rows hierarchically by factors and loadings
179|*     of variables,
180|*  2. inserting long descriptive names of variables at the end of
181|*     each row (provided that a name of data giving those names is
182|*     indicated by SORT),
183|*  3. displaying the elements with different shadings according to their
184|*     sizes (LIMITS, SHADOWS as described earlier, see LOADM?),
185|*  4. sorting the columns according to the sums of squares (COLUMNS=SORT),
186|*  5. displaying marginal sums of squares (SUMS=2) or sums (SUMS=1),
187|*  6. orienting the factors (signs of loadings) according to the same
188|*     rules as in the POSDIR operation (POSDIR=1,2, or 3), see POSDIR?,
189|*  7. allowing wide matrices to be written as a single block (WIDE=1)
190|*     if the line length is large enough.
191|*@C
192|*The most important specification is SORT of the form
193|*SORT=1
194|*or
195|*SORT=<name_of_data_file>
196|*In both cases the variables are written in the order of their
197|*loadings in different factors as follows. At first the factors
198|*are studied according the order of the sums of squares of loadings.
199|*Variables having their highest loadings in the strongest factor
200|*are sorted to descending order according to the absolute
201|*values of their loadings in that factor. These variables in this
202|*order will appear as first ones in the output. The same procedure
203|*is applied to the remaining variables according to the second
204|*strongest factor and so on.
205|*In the latter form of SORT the long names of variables are taken
206|*from the given data file and appended to the end of each row.
207|*This helps interpretation of factors.
208|*@C
209|*SORT=-1 or SORT=-<name_of_data_file>
210|*leads to the same sorting procedure but now within each factor
211|*the loadings are sorted by their signed values.
213|*An extra parameter in all forms of SORT, for example, SORT=1,0.3
214|*excludes variables with a highest loading less than a given value (0.3)
215|*from the sorting procedure and puts those variables (rows) at the end
216|*of the matrix.
218|*Sucro /LOADFACT <data_file>,<rotated_factor_matrix>
219|*does the job automatically with selected values of extra specifications
220|*and gives a ready-made work scheme which may be improved by the user.
221|*See
222|*/LOADFACT ?
223|*@END
