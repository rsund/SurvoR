üTa1@bTIA1@Creturn@@GM3@@@!T!1@CSURVOSCA@;SUR-SAVETb0@0@&TgC1@C1@C!@C1@C1@SCRATCH€TIA1@C(empty)@@GH@@TIA1@C?@@GH@@TIA2@C@GA@@GA@TXH@üClassical multidimensional scaling                                (Richardson 1938, Torgerson 1952)                                 This sucro is activated in the form                               /CSCAL D,m,CSCAL,CSEIGEN,CSCENT,CSDIST                            where D is the n*n matrix of distances or dissimilarities of      n objects.                                                        m gives the number of dimesions (scales) to be computed.                                                                            The results are saved in matrix files as follows:                                                               default matrix name Scale values (n*m)                     CSCAL          CSCAL.M     Eigenvalues (1*n)                      CSEIGEN        CSEIGEN.M   Eigenvalues in percentages             CSCENT         CSCENT.M    Reproduced distances (n*n)             CSDIST         CSDIST.M    üTp        Press ENTER!@TXM2@TVC600@_@@TXM3@Tp@T!1@CSURVOSCA@;SUR-RESTORETLGEnd@üüüüTXA@TgC1@C1@C!@C1@C1@TIA6@C@GB@@GB@T!6@CCSDIST.M@TIA5@C@GB@@GB@T!5@CCSCENT.M@TIA4@C@GB@@GB@T!4@CCSEIGEN.M@TIA3@C@GB@@GB@T!3@CCSCAL.M@TXB@MAT DIM =€TIA1@CMATerr@@GErr@@µ/CSCAL return to current jobüMAT &R==MAT TRANSFORM &R BY X#*X#MAT &R!=(-0.5)*&RMAT &R=CENTER(&R)MAT &R=&R'MAT &R!=CENTER(&R)MAT SPECTRAL DECOMPOSITION OF &R TO &S,@4MAT DIM &SMAT &P2=@4MAT TRANSFORM &P2 BY abs(X#)MAT &P3=SUM(&P2)MAT &P3=INV(&P3)MAT &P3=100*&P3MAT @4=@4'MAT NAME @4 AS EigenvaluesMAT @4(1,0)="Eigenvalue"MAT CLABELS "DIM" TO @4MAT &L1=&P3*@4MAT @5=ZER(2,row&S)MAT @5(1,1)=&L1MAT &T=TRI(row&S,row&S)MAT TRANSFORM &L1 BY abs(X#)MAT &L1=&L1*&TMAT @5(2,1)=&L1MAT NAME @5 AS Eigenvalues_(in_percentages)MAT CLABELS "DIM" TO @5MAT @5(1,0)="Per_cent"MAT @5(2,0)="Cumulat."MAT &L=@4MAT TRANSFORM &L BY sqrt(abs(X#))MAT RLABELS "DIM" TO &LMAT &L=DV(&L)MAT @3=&S*&LMAT @3=@3(1:row&S,1:@2)MAT NAME @3 AS CS_scalesMAT &R=MMT(@3)MAT &D=VD(&R)MAT &D!=DV(&D)MAT &C=CON(row&S,row&S)MAT @6=&D*&CMAT &C=&C*&DMAT @6=@6+&CMAT @6=@6-&RMAT @6=@6-&RMAT TRANSFORM @6 BY sqrt(abs(X#))MAT NAME @6 AS CS_distancesMAT KILL &*€üLR1üClassical multidimensional scaling for =:MAT LOAD @3,END+2 / Scale values (@2 dimensions)MAT LOAD @4,END+2 / EigenvaluesMAT LOAD @5,END+2 / Eigenvalues (percentages)MAT LOAD @6,END+2 / Reproduced distancesGPLOT @3,DIM1,DIM2 / POINT=[SMALL],CASETIN2@C1@@@GC@TXC@LSCAL =,@3,END+2 / Least Squares ScalingMAT DIM @4MAT e=@4(1,col@4)€C~ i7wBT=7@7@+@C0.00001@TIN7@C0@@@GD@Distance matrix = is not Euclidean!TXD@¹¹BLr1¹TLGEnd1@TXErr@Tp        Matrix not found!@TLGM2@üTXEnd1@T!1@CSURVOSCA@;SUR-RESTOREB¹¹¹¹TXEnd@Ta-1@Tÿ                                            30.5.1994/SM (21.4.1997)
*********************************************************************
*********************************************************************

 def WD=W1 Wm=W2 Wcscal=W3 Wcseigen=W4 Wcscent=W5 Wcsdist=W6 We=W7





 def W1=W1
